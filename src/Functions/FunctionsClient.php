<?php

/**
 * A PHP  class  client library to interact with Supabase Functions.
 *
 * Provides functions for handling .
 *
 * @author    Zero Copy Labs
 * @copyright 2006-2015 Squiz Pty Ltd (ABN 77 084 670 600)
 * @license   https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt BSD Licence
 */

namespace Supabase\Functions;

use Psr\Http\Message\ResponseInterface;
use Supabase\Util\FunctionsError;
use Supabase\Util\Request;

class FunctionsClient
{
    /**
     * A RESTful endpoint for querying and managing your database.
     *
     * @var string
     */
    protected string $url;

    /**
     * A header Bearer Token generated by the server in response to a login request
     * [service key, not anon key].
     *
     * @var array
     */
    protected array $headers = [];

    /**
     * Get the url.
     */
    public function __getUrl(): string
    {
        return $this->url;
    }

    /**
     * Get the headers.
     */
    public function __getHeaders(): array
    {
        return $this->headers;
    }

    /**
     * StorageBucket constructor.
     *
     * @param string $api_key      The anon or service role key
     * @param string $reference_id Reference ID
     * @param string $domain       The domain pointing to api
     * @param string $scheme       The api sheme
     *
     * @throws Exception
     */
    public function __construct($reference_id, $api_key, $options = [], $domain = 'supabase.co', $scheme = 'https')
    {
        $headers = ['Authorization' => "Bearer {$api_key}", 'apikey' => $api_key];
        $this->url = !empty($reference_id) ? "{$scheme}://{$reference_id}.{$domain}" : "{$scheme}://{$domain}}";

        if (!$this->url) {
            throw new \Exception('No URL provided');
        }

        $this->headers = $headers ?? null;
    }

    public function __request($method, $url, $headers, $body = null): ResponseInterface
    {
        return Request::request($method, $url, $headers, $body);
    }

    /**
     * Invoke a edge function.
     *
     * @param string $functionName The name of the function.
     * @param array  $options      The options for invoke a function.
     *
     * @throws Exception
     *
     * @return array
     */
    public function invoke($functionName, $options = [])
    {
        try {
            $functionArgs = $options['body'];
            $method = $options['method'] ?? 'POST';

            if (!is_array($functionArgs)) {
                if (base64_decode($functionArgs, true) === false) {
                    $body = file_get_contents($functionArgs);
                } else {
                    $body = base64_decode($functionArgs);
                }
            } elseif (is_string($functionArgs)) {
                $this->headers['Content-Type'] = 'text/plain';
                $body = $functionArgs;
            } elseif (is_array($functionArgs)) {
                $body = json_encode($functionArgs);
            } else {
                $this->headers['Content-Type'] = 'application/json';
                $body = json_encode($functionArgs);
            }

            $url = "{$this->url}/{$functionName}";
            $headers = $this->headers;
            $response = $this->__request($method, $url, $headers, $body);
            $responseType = explode(';', $response->getHeader('content-type')[0] ?? 'text/plain')[0];
            $data = null;
            if ($responseType === 'application/json') {
                $data = json_decode($response->getBody());
            } elseif ($responseType === 'application/octet-stream') {
                $data = $response->getBody()->getContents();
            } elseif ($responseType === 'multipart/form-data') {
                $data = $response->getBody()->getContents();
            } else {
                $data = $response->getBody()->getContents();
            }

            return ['data' => $data, 'error' => null];
        } catch (\Exception $e) {
            if (FunctionsError::isFunctionsError($e)) {
                return ['data' => ['user' => null], 'error' => $e];
            }

            throw $e;
        }
    }
}
